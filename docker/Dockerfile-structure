	# stanzas = isntrucciones

FROM node:23-alpine	

	# Los Dockerfiles deben empezar por una FORM instruction, FROM es usado para descargar la base image, en otras palabras nuestra imagen se creara a partir de una ya existente, en este caso la de NodeJS

COPY package.json /app/ 	

	# la instruccion COPY es usada para copiar archivos y/o directorios del HOST a el COTAINER, en este caso se copiara el archivo "package.josn" y se guardara en el directorio /app/ del container
	
		# * mientras que RUN es ejectudao en el container COPY es ejecutado en el host *, COPY <fuente> <destion> #

COPY src /app/ 	

	# copiamos todo lo que este dentro del directorio "src" y lo guardamos en el directorio "/app/" del container

ENV ENVIROMENT=develpment

	# ENV es usado para declarar variables de entorno que pueden ser usadas
	# en lines siguientes y alterar el comportamiento del container

WORKDIR /app/	

	# la instruccion WORKDIR es usada para setear el directorio de trabajo donde se ejecutaran los siguientes comandos, 
	# Cuando tengas que moverte entre directorios para que nuestro contenedor mientras se cree, es mejor usar 
	# WORKDIR asi describes mejor que estamos haciendo en el dockerfile
	
	# * Es equivalente a usa "cd" para cambiar al directorio donde queramos correr los comandos * #

VOLUME /path/to/volume

	# la stanza VOLUME indica el path en donde se el volumen (data persitente) del contianer

EXPOSE 3000

	# EXPOSE expone el puerto en la virtual network de docker es necesaria la opcion -p o -P
	# para abrir/forward los puertos en el host

RUN npm install 	

	# la instruccion RUN es usada para correr un comando de shell DENTRO del container

CMD [ "node", "server.js" ]	

	# la instruccion CMD es usada para ejecutar el comando dentro de los "[]" una ves que el container esta siendo ejecutado

	# * solo puede haber una instruccion CMD en el Dockerfile, CMD [ "command" "parameter" "OPTION", "etc..."] * #
